name: CI

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm ci
      - name: Check format
        run: npm run check-format
        continue-on-error: true
      - name: Lint
        run: npm run lint
        continue-on-error: true
      - name: Build webview
        run: npm run webview:build
      - name: Build
        run: npm run build
      - name: Run selective tests for changed files (PRs)
        if: github.event_name == 'pull_request'
        run: npm run test:changed

      - name: Run full tests (push to main)
        if: github.event_name == 'push'
        run: npm test
      - name: Coverage check
        if: github.event_name == 'push'
        run: npm run coverage:ci
        continue-on-error: true

  release-check:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Install dependencies
        run: npm ci
      - name: Run release-check
        run: npm run release-check

  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Restore VS Code test cache
        uses: actions/cache@v4
        with:
          path: .vscode-test
          key: vscode-test-${{ runner.os }}-1.78.0
      - name: Install dependencies
        run: npm ci
      - name: Run integration tests
        run: npm run pretest && npm run test:integration

  version-bump-and-tag:
    name: Bump version and tag (main)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Fetch tags
        run: git fetch --tags --force
      - name: Determine bump type and bump version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Skip if this is already a release commit
          if git log -1 --pretty=%s | grep -qE '^chore\(release\):'; then
            echo "Release commit detected, skipping bump."
            exit 0
          fi

          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          range=""
          if [ -n "$last_tag" ]; then
            range="$last_tag..HEAD"
          fi

          subjects=$(git log --format=%s $range)
          bodies=$(git log --format=%B $range)

          bump="patch"
          # Major if breaking change markers present ("!" in type or BREAKING CHANGE in body)
          if echo "$subjects" | grep -Ei '^[a-z]+(\(.+\))?!:' >/dev/null || echo "$bodies" | grep -Ei 'BREAKING CHANGE' >/dev/null; then
            bump="major"
          elif echo "$subjects" | grep -Ei '^feat(\(.+\))?: ' >/dev/null; then
            bump="minor"
          else
            bump="patch"
          fi
          echo "Bump type: $bump"

          # npm version will create a commit and a vX.Y.Z tag
          npm version "$bump" -m "chore(release): %s"
          # Push commit and tags using the default GITHUB_TOKEN credentials from checkout
          git push --follow-tags
