import esbuild from 'esbuild';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const isWatch = process.argv.includes('--watch');
const isProd = process.argv.includes('--production');

// Provide a small shim so compiled ESM can still call createRequire when a dep expects it.
const banner = `// ESM bundle generated by esbuild\nimport { createRequire as __createRequire } from 'module';\nconst require = __createRequire(import.meta.url);`;

async function build() {
  try {
    const ctx = await esbuild.build({
      entryPoints: { extension: path.join(__dirname, 'src', 'activation.ts') },
      bundle: true,
      platform: 'node',
      target: ['node18'],
      external: ['vscode'],
      outfile: path.join(__dirname, 'dist', 'extension.js'),
      sourcemap: !isProd,
      minify: isProd,
      format: 'esm',
      banner: { js: banner },
      logLevel: 'info',
    });
    console.log(`[esbuild] Built extension (ESM${isProd ? ' prod' : ''}) -> dist/extension.js`);
    if (isWatch) {
      console.log(
        '[esbuild] Watch mode enabled (manual rebuild on change provided by esbuild incremental).'
      );
    }
    return ctx;
  } catch (err) {
    console.error('[esbuild] Build failed:', err);
    process.exit(1);
  }
}

build();
