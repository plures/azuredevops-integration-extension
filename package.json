{
  "type": "module",
  "name": "azuredevops-integration-extension",
  "displayName": "Azure DevOps Integration for VS Code",
  "description": "Integrate Azure DevOps work items, time tracking, and Git workflows directly in VS Code. Manage tasks, track time, create branches, and submit pull requests without leaving your editor.",
  "version": "1.6.0",
  "publisher": "PluresLLC",
  "icon": "media/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/plures/azuredevops-integration-extension"
  },
  "bugs": {
    "url": "https://github.com/plures/azuredevops-integration-extension/issues"
  },
  "homepage": "https://github.com/plures/azuredevops-integration-extension#readme",
  "license": "MIT",
  "galleryBanner": {
    "color": "#0078D4",
    "theme": "dark"
  },
  "engines": {
    "vscode": "^1.80.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "azure",
    "devops",
    "work items",
    "time tracking",
    "git",
    "integration",
    "productivity",
    "project management"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "azureDevOpsIntegration.showWorkItems",
        "title": "Show Work Items",
        "category": "Azure DevOps"
      },
      {
        "command": "azureDevOpsIntegration.refreshWorkItems",
        "title": "Refresh Work Items",
        "icon": "$(refresh)"
      },
      {
        "command": "azureDevOpsIntegration.createWorkItem",
        "title": "Create Work Item",
        "icon": "$(add)"
      },
      {
        "command": "azureDevOpsIntegration.editWorkItem",
        "title": "Edit Work Item",
        "icon": "$(edit)"
      },
      {
        "command": "azureDevOpsIntegration.startTimer",
        "title": "Start Timer",
        "icon": "$(play)"
      },
      {
        "command": "azureDevOpsIntegration.stopTimer",
        "title": "Stop Timer",
        "icon": "$(debug-stop)"
      },
      {
        "command": "azureDevOpsIntegration.createBranchFromWorkItem",
        "title": "Create Branch from Work Item",
        "icon": "$(git-branch)"
      },
      {
        "command": "azureDevOpsIntegration.createPullRequest",
        "title": "Create Pull Request",
        "icon": "$(git-pull-request)"
      },
      {
        "command": "azureDevOpsIntegration.openWorkItemInBrowser",
        "title": "Open in Browser",
        "icon": "$(globe)"
      }
    ],
    "views": {
      "explorer": [
        {
          "id": "azureDevOpsWorkItems",
          "name": "Work Items",
          "when": "azureDevOpsIntegration.enabled",
          "icon": "$(checklist)",
          "contextualTitle": "Azure DevOps Work Items"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "azureDevOpsIntegration",
          "title": "Azure DevOps",
          "icon": "media/workitems-icon.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "azureDevOpsWorkItems",
        "contents": "No Azure DevOps configuration found.\n[Configure Azure DevOps](command:azureDevOpsIntegration.showWorkItems)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "azureDevOpsIntegration.refreshWorkItems",
          "when": "view == azureDevOpsWorkItems",
          "group": "navigation"
        },
        {
          "command": "azureDevOpsIntegration.createWorkItem",
          "when": "view == azureDevOpsWorkItems",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "azureDevOpsIntegration.editWorkItem",
          "when": "view == azureDevOpsWorkItems && viewItem == workItem",
          "group": "inline"
        },
        {
          "command": "azureDevOpsIntegration.startTimer",
          "when": "view == azureDevOpsWorkItems && viewItem == workItem",
          "group": "inline"
        },
        {
          "command": "azureDevOpsIntegration.createBranchFromWorkItem",
          "when": "view == azureDevOpsWorkItems && viewItem == workItem",
          "group": "git"
        },
        {
          "command": "azureDevOpsIntegration.createPullRequest",
          "when": "view == azureDevOpsWorkItems && viewItem == workItem",
          "group": "git"
        },
        {
          "command": "azureDevOpsIntegration.openWorkItemInBrowser",
          "when": "view == azureDevOpsWorkItems && viewItem == workItem",
          "group": "browser"
        }
      ]
    },
    "configuration": {
      "title": "Azure DevOps Integration",
      "properties": {
        "azureDevOpsIntegration.organization": {
          "type": "string",
          "default": "",
          "description": "Azure DevOps organization name"
        },
        "azureDevOpsIntegration.project": {
          "type": "string",
          "default": "",
          "description": "Azure DevOps project name"
        },
        "azureDevOpsIntegration.personalAccessToken": {
          "type": "string",
          "default": "",
          "description": "Personal Access Token for Azure DevOps API"
        },
        "azureDevOpsIntegration.defaultElapsedLimitHours": {
          "type": "number",
          "default": 3.5,
          "minimum": 0.1,
          "maximum": 24,
          "description": "Default maximum hours for time tracking sessions (0.1-24 hours)"
        },
        "azureDevOpsIntegration.apiRatePerSecond": {
          "type": "number",
          "default": 2,
          "minimum": 0.1,
          "maximum": 10,
          "description": "API request rate limit (requests per second)"
        },
        "azureDevOpsIntegration.apiBurst": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 20,
          "description": "API burst limit (maximum requests in burst)"
        },
        "azureDevOpsIntegration.workItemsPerPage": {
          "type": "number",
          "default": 50,
          "minimum": 10,
          "maximum": 200,
          "description": "Number of work items to fetch per page"
        },
        "azureDevOpsIntegration.refreshIntervalMinutes": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 60,
          "description": "Auto-refresh interval in minutes"
        },
        "azureDevOpsIntegration.enableAutoRefresh": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic refresh of work items"
        },
        "azureDevOpsIntegration.enableTimeTracking": {
          "type": "boolean",
          "default": true,
          "description": "Enable time tracking features"
        },
        "azureDevOpsIntegration.enableBranchCreation": {
          "type": "boolean",
          "default": true,
          "description": "Enable branch creation from work items"
        },
        "azureDevOpsIntegration.enablePullRequestCreation": {
          "type": "boolean",
          "default": true,
          "description": "Enable pull request creation features"
        },
        "azureDevOpsIntegration.workItemQuery": {
          "type": "string",
          "default": "SELECT [System.Id], [System.Title], [System.State], [System.AssignedTo], [System.WorkItemType] FROM WorkItems WHERE [System.TeamProject] = @project AND [System.State] <> 'Closed' ORDER BY [System.CreatedDate] DESC",
          "description": "WIQL query for fetching work items"
        },
        "azureDevOpsIntegration.branchNameTemplate": {
          "type": "string",
          "default": "feature/{id}-{title}",
          "description": "Template for branch names created from work items"
        },
        "azureDevOpsIntegration.defaultWorkItemType": {
          "type": "string",
          "default": "Task",
          "description": "Default work item type for new items"
        },
        "azureDevOpsIntegration.showCompletedWorkItems": {
          "type": "boolean",
          "default": false,
          "description": "Show completed/closed work items in the list"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "node esbuild.mjs",
    "watch": "node esbuild.mjs --watch",
    "pretest": "npm run compile",
    "test": "node --loader ts-node/esm scripts/run-esm-tests-cmd.mjs",
    "test:unit": "npm test",
    "test:integration": "node --loader ts-node/esm scripts/run-integration.mjs",
    "test:ci": "npm run test && npm run test:integration",
    "lint": "npx eslint src --ext ts",
    "format": "npx prettier --write \"**/*.{ts,js,json,md,mjs}\"",
    "check-format": "npx prettier --check \"**/*.{ts,js,json,md,mjs}\"",
    "prepare": "husky install",
    "postinstall": "npm run prepare",
    "build:webview": "cd webview-svelte && npm run build",
    "build:extension": "npm run compile",
    "build:all": "npm run build:webview && npm run build:extension",
    "package": "npm run build:all && node scripts/package-vsix.mjs",
    "screenshots:setup": "npx playwright install",
    "screenshots:build": "npm run build:webview && npm run screenshots:capture",
    "screenshots:capture": "node scripts/capture-screenshots.mjs",
    "screenshots:watch": "node scripts/watch-screenshots.mjs"
  },
  "devDependencies": {
    "@types/vscode": "^1.80.0",
    "@types/node": "20.x",
    "@typescript-eslint/eslint-plugin": "^6.4.1",
    "@typescript-eslint/parser": "^6.4.1",
    "eslint": "^8.47.0",
    "typescript": "^5.1.6",
    "esbuild": "^0.19.2",
    "@vscode/test-electron": "^2.3.4",
    "@vscode/vsce": "^2.20.1",
    "ts-node": "^10.9.1",
    "mocha": "^10.2.0",
    "@types/mocha": "^10.0.1",
    "prettier": "^3.0.2",
    "husky": "^8.0.3",
    "lint-staged": "^14.0.1",
    "@commitlint/cli": "^17.7.1",
    "@commitlint/config-conventional": "^17.7.0",
    "chokidar": "^3.6.0",
    "playwright": "^1.48.2"
  },
  "dependencies": {
    "axios": "^1.5.0"
  },
  "lint-staged": {
    "*.{ts,js,json,md,mjs}": [
      "prettier --write"
    ]
  },
  "volta": {
    "node": "20.19.0",
    "npm": "10.2.4"
  }
}